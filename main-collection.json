{
	"info": {
		"_postman_id": "c5ce98f3-00e6-4d55-a9ae-db2643108e1b",
		"name": "MAIN",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14370588"
	},
	"item": [
		{
			"name": "Get Posts",
			"item": [
				{
					"name": "Retrieve All Posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Retrieve All Posts\", () => {\r",
									"    // Status code\r",
									"    pm.test(\"Status code is 200\", () => {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    // JSON format\r",
									"    pm.test(\"Response is in JSON format\", () => {\r",
									"        pm.response.to.be.json;\r",
									"    });\r",
									"\r",
									"    // Array of posts\r",
									"    pm.test(\"Response contains an array of posts\", () => {\r",
									"        pm.expect(jsonData).to.be.an('array').that.is.not.empty;\r",
									"    });\r",
									"\r",
									"    // Each post's data\r",
									"    pm.test(\"Validate each post's data\", () => {\r",
									"        jsonData.forEach(post => {\r",
									"            //  id\r",
									"            pm.expect(post).to.have.property('id').that.is.a('number').and.not.null;\r",
									"            pm.expect(post.id).to.be.above(0);\r",
									"\r",
									"            //  userId \r",
									"            pm.expect(post).to.have.property('userId').that.is.a('number').and.not.null;\r",
									"            pm.expect(post.userId).to.be.above(0);\r",
									"\r",
									"            //  title\r",
									"            pm.expect(post).to.have.property('title').that.is.a('string').and.not.empty;\r",
									"\r",
									"            //  body\r",
									"            pm.expect(post).to.have.property('body').that.is.a('string').and.not.empty;\r",
									"            \r",
									"        });\r",
									"    });\r",
									"\r",
									"    // Response time\r",
									"    pm.test(\"Response time is less than 200ms\", () => {\r",
									"        pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"    });\r",
									"\r",
									"\r",
									"    // Response body size \r",
									"    pm.test(\"Response body size is less than 1 KB\", () => {\r",
									"        const bodySize = Buffer.byteLength(pm.response.text(), 'utf8');\r",
									"        pm.expect(bodySize).to.be.below(1024); // 1 KB in bytes\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/posts",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve a post with a valid ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let random = Math.floor(Math.random() * 100) + 1;\r",
									"\r",
									"pm.collectionVariables.set(\"postID\",random)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Extract response data as JSON",
									"const post = pm.response.json();",
									"",
									"// Status Code",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Response format",
									"pm.test(\"Response is in JSON format\", () => {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// Response Time",
									"pm.test(\"Response time is less than 200ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"// validate the ID",
									"pm.test(\"Post have the correct postID\",  ()=> {",
									"    const postID = parseInt(pm.collectionVariables.get(\"postID\"));",
									"        pm.expect(post.id).to.eql(postID);",
									"});",
									"",
									"// Validate body",
									"pm.test(\"Validate response body for single post\", () => {",
									"    // Validate id",
									"    pm.test(\"Post ID is valid\", () => {",
									"        pm.expect(post.id).to.be.a('number').and.not.null;",
									"        pm.expect(post.id).to.be.above(0); // Assuming post ID is a positive integer",
									"    });",
									"",
									"    // Validate userId",
									"    pm.test(\"User ID is valid\", () => {",
									"        pm.expect(post.userId).to.be.a('number').and.not.null;",
									"        pm.expect(post.userId).to.be.above(0); // Assuming userId is a positive integer",
									"    });",
									"",
									"    // Validate title",
									"    pm.test(\"Title is not empty\", () => {",
									"        pm.expect(post.title).to.be.a('string').and.not.empty;",
									"    });",
									"",
									"    // Validate body",
									"    pm.test(\"Body is not empty\", () => {",
									"        pm.expect(post.body).to.be.a('string').and.not.empty;",
									"    });",
									"}); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/posts/{{postID}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"posts",
								"{{postID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve a post with an Invalid ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random invalid post ID between 101 and 1000\r",
									"const randomInvalidPostId = Math.floor(Math.random() * (1000 - 101 + 1)) + 101;\r",
									"\r",
									"pm.collectionVariables.set(\"invalidPostId\", randomInvalidPostId);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Extract response data as JSON\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Test suite for handling invalid post ID\r",
									"pm.test(\"Handling Invalid Post ID\", () => {\r",
									"    // Status code\r",
									"    pm.test(\"Status code is 404\", () => {\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"\r",
									"    // Error message\r",
									"    pm.test(\"Error message is returned\", () => {\r",
									"        pm.expect(jsonData).to.have.property('error');\r",
									"        pm.expect(jsonData.error).to.include(\"Post not found\");\r",
									"    });\r",
									"\r",
									"    // pm.test(\"Response is an empty JSON object\", () => {\r",
									"    //     pm.expect(jsonData).to.eql({});\r",
									"    // });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/posts/{{invalidPostId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"posts",
								"{{invalidPostId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete",
			"item": [
				{
					"name": "Delete with a valid ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete with a Valid Post ID\", () => {\r",
									"    // Status\r",
									"    pm.test(\"Status code is 200\", () => {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    // Body\r",
									"    pm.test(\"Response body includes 'Post deleted'\", () => {\r",
									"        pm.expect(pm.response.text()).to.include(\"Post deleted\");\r",
									"    });\r",
									"\r",
									"    // Content-Type\r",
									"    pm.test(\"Response has JSON content type\", () => {\r",
									"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"    });\r",
									"\r",
									"    // Response time\r",
									"    pm.test(\"Response time is less than 500ms\", () => {\r",
									"        pm.expect(pm.response.responseTime).to.be.below(500); \r",
									"    });\r",
									"\r",
									"    // Response size\r",
									"    pm.test(\"Response body size is less than 1 KB\", () => {\r",
									"    const bodySize = Buffer.byteLength(pm.response.text(), 'utf8');\r",
									"    pm.expect(bodySize).to.be.below(1024); // 1 KB in bytes\r",
									"    });\r",
									"\r",
									"\r",
									"    // Verify that the post has been deleted by attempting to retrieve it\r",
									"    const postId = pm.variables.get(\"fixedIdOne\"); \r",
									"    const baseURL = pm.variables.get(\"baseURL\"); \r",
									"\r",
									"    pm.sendRequest(`${baseURL}/posts/${postId}`, (err, res) => {\r",
									"        pm.test(\"Attempt to retrieve deleted post returns 404\", () => {\r",
									"            pm.expect(res).to.have.status(404);\r",
									"        });\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/posts/{{fixedIdOne}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"posts",
								"{{fixedIdOne}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete with an invalid ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let invalidID = pm.collectionVariables.get(\"invalidPostId\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete with an Invalid Post ID\", () => {",
									"",
									"// Fixed the test for status code to check for 404",
									"pm.test(\"Status code is 404\", () => {",
									"    pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"// Body",
									"pm.test(\"Response body includes 'Post not found'\", () => {",
									"    pm.expect(pm.response.text()).to.include(\"Post not found\");",
									"});",
									"",
									"// Content-Type",
									"pm.test(\"Response has JSON content type\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Response time",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Response size",
									"pm.test(\"Response body size is less than 1 KB\", () => {",
									"    const bodySize = Buffer.byteLength(pm.response.text(), 'utf8');",
									"    pm.expect(bodySize).to.be.below(1024); // 1 KB in bytes",
									"});",
									"})",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/posts/{{invalidPostId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"posts",
								"{{invalidPostId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create New Post",
			"item": [
				{
					"name": "Create a new post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const newPost = pm.response.json();\r",
									" \r",
									"pm.test(\"Create a New Post\", () => {\r",
									"    // Status\r",
									"    pm.test(\"Status code is 201\", () => {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"\r",
									"\r",
									"    // Content-Type\r",
									"    pm.test(\"Response has JSON content type\", () => {\r",
									"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"    });\r",
									"\r",
									"    // Response time\r",
									"    pm.test(\"Response time is less than 500ms\", () => {\r",
									"        pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"    });\r",
									"\r",
									"    // Response size\r",
									"    pm.test(\"Response body size is less than 1 KB\", () => {\r",
									"        const bodySize = Buffer.byteLength(pm.response.text(), 'utf8');\r",
									"        pm.expect(bodySize).to.be.below(1024); // 1 KB in bytes\r",
									"    });\r",
									"// Body\r",
									"    pm.test(\"Response body has expected structure\", () => {\r",
									"        // pm.expect(newPost).to.have.property('id').that.is.a('number').and.not.null;\r",
									"        pm.expect(newPost).to.have.property('userId').that.is.a('number').and.not.null;\r",
									"        pm.expect(newPost).to.have.property('title').that.is.a('string').and.not.empty;\r",
									"        pm.expect(newPost).to.have.property('body').that.is.a('string').and.not.empty;\r",
									"    });\r",
									"\r",
									"    \r",
									"    // Verify the new post by attempting to retrieve it\r",
									"  const postId = newPost.id; \r",
									"    const baseURL = pm.variables.get(\"baseURL\"); \r",
									"    pm.sendRequest(`${baseURL}/posts/${postId}`, (err, res) => {\r",
									"        pm.test(\"Retrieve newly created post\", () => {\r",
									"            pm.expect(res).to.have.status(200);\r",
									"            \r",
									"            const retrievedPost = res.json();\r",
									"            pm.expect(retrievedPost).to.have.property('id').that.equals(postId);\r",
									"            pm.expect(retrievedPost).to.have.property('userId').that.equals(newPost.userId);\r",
									"            pm.expect(retrievedPost).to.have.property('title').that.equals(newPost.title);\r",
									"            pm.expect(retrievedPost).to.have.property('body').that.equals(newPost.body);\r",
									"        });\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"example\",\r\n  \"body\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\",\r\n  \"userId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/posts",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update",
			"item": [
				{
					"name": "Update an Existing Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Extract response data as JSON\r",
									"const updatedPost = pm.response.json();\r",
									"const postID =parseInt(pm.collectionVariables.get(\"fixedIdOne\"));\r",
									"const baseURL = pm.variables.get(\"baseURL\"); \r",
									"\r",
									"\r",
									"pm.test(`Update an Existing Post with ID ${postID}`, () => {\r",
									"    // Status\r",
									"    pm.test(\"Status code is 200\", () => {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    // Content-Type\r",
									"    pm.test(\"Response has JSON content type\", () => {\r",
									"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"    });\r",
									"\r",
									"    // Response time\r",
									"    pm.test(\"Response time is less than 500ms\", () => {\r",
									"        pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"    });\r",
									"\r",
									"    // Response size\r",
									"    pm.test(\"Response body size is less than 1 KB\", () => {\r",
									"        const bodySize = Buffer.byteLength(pm.response.text(), 'utf8');\r",
									"        pm.expect(bodySize).to.be.below(1024); // 1 KB in bytes\r",
									"    });\r",
									"\r",
									"       // Body\r",
									"    pm.test(\"Response body has expected structure\", () => {\r",
									"        // pm.expect(updatedPost).to.have.property('id').that.is.a('number').and.not.null;\r",
									"        // pm.expect(updatedPost).to.have.property('userId').that.is.a('number').and.not.null;\r",
									"        pm.expect(updatedPost).to.have.property('title').that.is.a('string').and.not.empty;\r",
									"        pm.expect(updatedPost).to.have.property('body').that.is.a('string').and.not.empty;\r",
									"    });\r",
									"\r",
									"    // Verify the updated post by attempting to retrieve it\r",
									"    pm.sendRequest(`${baseURL}/posts/${postID}`, (err, res) => {\r",
									"        pm.test(\"Retrieve updated post\", () => {\r",
									"            pm.expect(res).to.have.status(200);\r",
									"\r",
									"             const retrievedPost = res.json();\r",
									"            pm.expect(retrievedPost).to.have.property('id').that.equals(postID);\r",
									" \r",
									"            pm.expect(retrievedPost).to.have.property('title').that.equals(updatedPost.title);\r",
									"            pm.expect(retrievedPost).to.have.property('body').that.equals(updatedPost.body);\r",
									"        });\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-request script to validate the 'id' parameter\r",
									"pm.test(\"Validate 'id' parameter\", () => {\r",
									"    const id = pm.collectionVariables.get(\"fixedIdOne\"); \r",
									"    pm.expect(isValidId(id)).to.be.true;\r",
									"});\r",
									"\r",
									"function isValidId(id) {\r",
									"    return !isNaN(id) && parseInt(id) > 0;\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"updated title\",\r\n  \"body\": \"updated body\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/posts/{{fixedIdOne}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"posts",
								"{{fixedIdOne}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update title only",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const updatedPost = pm.response.json();",
									"const postID = parseInt(pm.collectionVariables.get(\"fixedIdOne\"));",
									"const baseURL = pm.variables.get(\"baseURL\");",
									"",
									"pm.test(`Update an Existing Post with ID ${postID}`, () => {",
									"    // Status",
									"    pm.test(\"Status code is 200\", () => {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // Content-Type",
									"    pm.test(\"Response has JSON content type\", () => {",
									"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"    });",
									"",
									"    // Response time",
									"    pm.test(\"Response time is less than 500ms\", () => {",
									"        pm.expect(pm.response.responseTime).to.be.below(500);",
									"    });",
									"",
									"    // Response size",
									"    pm.test(\"Response body size is less than 1 KB\", () => {",
									"        const bodySize = Buffer.byteLength(pm.response.text(), 'utf8');",
									"        pm.expect(bodySize).to.be.below(1024); // 1 KB in bytes",
									"    });",
									"",
									"    // Verify response body structure",
									"    pm.test(\"Response body has expected structure\", () => {",
									"        pm.expect(updatedPost).to.have.property('id').that.is.a('number');",
									"        pm.expect(updatedPost).to.have.property('userId').that.is.a('number').and.not.null;",
									"        pm.expect(updatedPost).to.have.property('title').that.is.a('string').and.not.empty;",
									"        pm.expect(updatedPost).to.have.property('body').that.is.a('string').and.not.empty;",
									"    });",
									"",
									"    // Verify the updated post by attempting to retrieve it",
									"    pm.sendRequest(`${baseURL}/posts/${postID}`, (err, res) => {",
									"        pm.test(\"Retrieve updated post\", () => {",
									"            pm.expect(res).to.have.status(200);",
									"",
									"            const retrievedPost = res.json();",
									"            pm.expect(retrievedPost).to.have.property('id').that.is.a('number').and.equals(postID);",
									"            pm.expect(retrievedPost).to.have.property('title').that.equals(updatedPost.title);",
									"            pm.expect(retrievedPost).to.have.property('userId').that.is.a('number').and.not.null;",
									"            pm.expect(retrievedPost).to.have.property('body').that.is.a('string').and.not.empty;",
									"        });",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Verify request body\r",
									"pm.test(\"Request body does not contain id, body, or userId\", () => {\r",
									"    const requestBody = JSON.parse(pm.request.body.raw);\r",
									"    pm.expect(requestBody).not.to.have.property('id');\r",
									"    pm.expect(requestBody).not.to.have.property('userId');\r",
									"    pm.expect(requestBody).not.to.have.property('body');\r",
									"    // console.log(requestBody);\r",
									"});\r",
									"\r",
									"// Pre-request script to validate the 'id' parameter\r",
									"pm.test(\"Validate 'id' parameter\", () => {\r",
									"    const id = pm.collectionVariables.get(\"fixedIdOne\"); \r",
									"    pm.expect(isValidId(id)).to.be.true;\r",
									"});\r",
									"\r",
									"function isValidId(id) {\r",
									"    return !isNaN(id) && parseInt(id) > 0;\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \r\n  \"title\": \"updated title\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/posts/{{fixedIdOne}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"posts",
								"{{fixedIdOne}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "By User",
			"item": [
				{
					"name": "Filter posts by valid user ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let random = Math.floor(Math.random() * 10) + 1;\r",
									"\r",
									"pm.collectionVariables.set(\"userId\",random)\r",
									"\r",
									"\r",
									"const userId = pm.collectionVariables.get(\"userId\");\r",
									"\r",
									"pm.test(\"Validate userId\", () => {\r",
									"    pm.expect(parseInt(userId)).to.be.a('number').and.satisfy(num => num > 0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Extract response data as JSON\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Test to check if the status code is 200\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test to check if the response is in JSON format\r",
									"pm.test(\"Response is in JSON format\", () => {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"// Test to check if the response contains an array of posts\r",
									"pm.test(\"Response contains an array of posts\", () => {\r",
									"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"// Test to validate each post's data\r",
									"pm.test(\"Validate each post's data\", () => {\r",
									"    jsonData.forEach(post => {\r",
									"        // Validate id\r",
									"        pm.expect(post).to.have.property('id').that.is.a('number').and.not.null;\r",
									"        pm.expect(post.id).to.be.above(0);\r",
									"\r",
									"        // Validate userId\r",
									"        pm.expect(post).to.have.property('userId').that.is.a('number').and.not.null;\r",
									"        pm.expect(post.userId).to.be.above(0);\r",
									"\r",
									"        // Validate title\r",
									"        pm.expect(post).to.have.property('title').that.is.a('string').and.not.empty;\r",
									"\r",
									"        // Validate body\r",
									"        pm.expect(post).to.have.property('body').that.is.a('string').and.not.empty;\r",
									"    });\r",
									"});\r",
									"\r",
									"// Test to check if all posts have the correct userId\r",
									"pm.test(\"All posts have the correct userId\", () => {\r",
									"    const userId = parseInt(pm.collectionVariables.get(\"userId\"));\r",
									"    jsonData.forEach(post => {\r",
									"        pm.expect(post.userId).to.eql(userId);\r",
									"    });\r",
									"});\r",
									"\r",
									"// Test to check if the response time is acceptable (e.g., less than 200ms)\r",
									"pm.test(\"Response time is less than 200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"// Unset userId variable\r",
									"pm.collectionVariables.unset(\"userId\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/posts?userId={{userId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"posts"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter posts by invalid user ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// let random = Math.floor(Math.random() * 10) + 11;\r",
									"let random =0;\r",
									"\r",
									"pm.collectionVariables.set(\"invalidUserId\",random)\r",
									"\r",
									"const userId = pm.collectionVariables.get(\"invalidUserId\");\r",
									"\r",
									"pm.test(\"Validate userId\", () => {\r",
									"    pm.expect(parseInt(userId)).to.be.a('number').and.satisfy(num => num > 0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test to check if the status code is 404 for invalid userId\r",
									"pm.test(\"Status code is 404 for invalid userId\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"\r",
									"// Test to check if the error message indicates invalid userId\r",
									"pm.test(\"Error message indicates invalid userId\", () => {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.error).to.eql(\"Invalid userId\");\r",
									"});\r",
									"\r",
									"pm.collectionVariables.unset(\"invalidUserId\")"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/posts?userId={{invalidUserId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"posts"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{invalidUserId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"let baseURL =\"https://jsonplaceholder.typicode.com\"\r",
					"\r",
					"pm.collectionVariables.set(\"baseURL\",baseURL);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "https://jsonplaceholder.typicode.com"
		},
		{
			"key": "postID",
			"value": "1"
		},
		{
			"key": "invalidPostId",
			"value": "99999"
		},
		{
			"key": "fixedIdOne",
			"value": "1",
			"type": "string"
		}
	]
}